#+BLOG: sdowney
#+POSTID: 244
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+title: AnyDuck : A Value Type Erased Type
#+date: <2019-07-11 Thu>
#+author: Steve Downey
#+email: sdowney@sdowney.org
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.1.91 (Org mode 9.2.4)
#+options: html-link-use-abs-url:nil html-postamble:nil html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:nil tex:t
#+html_doctype: xhtml-strict
#+html_container: div
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head: <link rel="stylesheet" type="text/css" href="http://sdowney.org/css/smd-zenburn.css" />
#+html_head_extra:
#+subtitle:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1.91 (<a href="https://orgmode.org">Org</a> mode 9.2.4)
#+latex_header:
#+BABEL: :results output graphics :tangle yes

* A Constrained Duck Typed Value Type

For yak shaving reasons, I need a type able to hold any type conforming to a
particular interface. I'd like this to act as a (Semi)Regular value type. That
is, I'd like it to be copyable, assignable, and so forth, and not be sliced or
otherwise mangeled in the process. I want it to be reasonably efficient, not
significantly worse than traditional virtual function overhead. I also don't
want to be terribly creative in implementing, using existing std library types.

The overall pattern I've settled on for now is to hold the type in a ~std::any~
and dispatch to the held type through function pointers referring to
lambdas. The lambda allows me to capture the type being stored into the
~AnyDuck~ and safely recover it. There's some boilerplate to write to dispatch
to the lambda. Perhaps one day, when we have reflection, that can be automated.

For purposes of this paper, I'll assume I have an interface Duck that I want to model:
#+begin_src C++
class Duck {
  public:
    void quack(int length) const;
};
#+end_src
Ducks are defined as things that quack, and quack is a const function. I want to be able to put any type that models Duck into an AnyDuck, and pass AnyDuck into any generic function expecting a Duck. I also want to be able to extend AnyDuck to unrelated types, as long as they model Duck. Mallard, for example:
#+begin_src c++
class Mallard {
  public:
    void quack(int length) const;
};

#+end_src

The core of the idea, is to capture the Duck type in a templated constructor where I know the exact type, and create the appropriate lambda:
#+begin_src C++
auto quack_ = [](std::any const& d, int i) {
    return std::any_cast<std::remove_reference_t<Duck>>(&d)->quack(i);
}
#+end_src
And then wrap the public facing call so that quackfn can be stored as a function pointer
#+begin_src C++
void AnyDuck::quack(int length) const { return quack_(this->duck_, length); }
#+end_src

Here's the whole thing:
#+begin_src c++
class AnyDuck {
    std::any duck_;
    using quackfn = void (*)(std::any const&, int);
    quackfn quack_;

  public:
    AnyDuck(AnyDuck const&) = default;
    AnyDuck(AnyDuck&)       = default;

    template <typename Duck>
    AnyDuck(Duck&& duck)
        : duck_(std::forward<Duck>(duck)),
          quack_([](std::any const& d, int i) {
              return std::any_cast<std::remove_reference_t<Duck>>(&d)->quack(
                  i);
          }) {}

    void quack(int length) const { return quack_(this->duck_, length); }
};
#+end_src
The copy constructors are there to be a better match than the templated constructor for copy by value. Codegen is surprisingly good. If the types are all present, the functions are inlined well, except for the overhead of storage into the any. For any unknown AnyDuck, there's a dispatch via pointer indirection:

#+begin_src c++
void test(AnyDuck a) {
    a.quack(1);
}
#+end_src

results in something like

#+begin_src asm
0000000000000050 <test(anyduck::AnyDuck)>:
  50:   48 8b 47 10             mov    0x10(%rdi),%rax
  54:   be 01 00 00 00          mov    $0x1,%esi
  59:   ff e0                   jmpq   *%rax
  5b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)

#+end_src

and the ~any_cast<>~ from the address of the passed in std::any is noexcept, but does in general have to check if the ~any~ has a value. Not as cheap as pure an interface type, but not terribly more expensive.

For the case where the ~quack~ is known, codegen is something like
#+begin_src asm
anyduck::AnyDuck::AnyDuck<Duck&>(Duck&)::{lambda(std::any const&, int)#1}::__invoke(std::any const&, int): # @anyduck::AnyDuck::AnyDuck<Duck&>(Duck&)::{lambda(std::any const&, int)#1}::__invoke(std::any const&, int)
        movl    %esi, %edi
        jmp     bell(int)                # TAILCALL
#+end_src

If the implementation of the underlying quack is not available there's a little more work

#+begin_src asm
anyduck::AnyDuck::AnyDuck<Mallard&>(Mallard&)::{lambda(std::any const&, int)#1}::__invoke(std::any const&, int): # @anyduck::AnyDuck::AnyDuck<Mallard&>(Mallard&)::{lambda(std::any const&, int)#1}::__invoke(std::any const&, int)
        movl    $_ZNSt3any17_Manager_internalI7MallardE9_S_manageENS_3_OpEPKS_PNS_4_ArgE, %ecx
        xorl    %eax, %eax
        cmpq    %rcx, (%rdi)
        leaq    8(%rdi), %rcx
        cmoveq  %rcx, %rax
        movq    %rax, %rdi
        jmp     Mallard::quack(int) const    # TAILCALL
#+end_src

But far less than I would have expected. ~std::any~ is less awful than I thought.

You can take a look at the code so far here
[[https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSAbAQwDtRkBSAJgCFufSAZ1QBXYskwgA5NwDMeFsgYisAag6yAwqwCeG7BwAMAQTkKlKzOq0EdAB0wB9AsSaFB%252Bo6ZMsmAW0xBOyYJVUFkVwJkBHUAdj4TLyUmQUFVYxYdABERZABrOITjVRKwgnQQEF1VdFy8xw0i0tURQQVgVQBHERC8gDMWayzVADdUPHRVCAAqAEoIQXLK6rQWRe4ANlJVBQJZxq9m7t6Brp78htkiw9U7EQAjBjxkEBuSjOy6iA%252Bc/NVV9ZcDazIY1TB9JgiBgEA4mZo/L4I/KbEEaYZYCFQmFXN7pTK/PIQVGydHgyHQ2HeYqlAiYPx2Zi06yaWwOXwBVQEzxw0pIwlcoGbGp1fY85olEDCi4LJYgPokADuTGI6A0mi5smwEFq%252BVms1IuPFZ16jggHAArHxzVkZRUqpl/qg1jCgTVtrsdqj4oajaViJgCGJBos7bpHMgUtjNCHKv6/KgRk5/X1MP7FE4oxqDJqzUD0LMALT6Y75M1i30VvD7HHlo0cWJZL18BteXFjCbG0sehiYNgEBAggEEQqqf2B4iDEv1CD9vCCIuanX1bY9vsDxpxLKtls1qn14YAegPqnZgWCoXCkWirZMmAAHrSJ6NxpN7pgGAwIB6q5SksxUpydSFDcdyPM8rzlu2kxTl%252BLDDquwD9oOTqLIUY5Bqob4fhACFIQcLaJDu1wmMkAEALJMB%252ByqTPWTS3A8TwvG2L6doS3a9ohA6Os6v5ETexhHs%252BHYUVRKqVDB7FrshzrASYgnNDGKCiMOapquoXBcCJzBiepXDMmpuExKpWiqGAMjmpoLBmZSgn7vxUGqLSiwQFp1FCn4lHafmsnUiUl5MFESAgHyqhMBAHmifmlLNEwAB0MG0NW1wEVSDlOQQCwRAF0SVCFQ5CkwTa4nFCVJduW6JJVxgeh5CiwcOB7TMqwDINMB7bNEyrTNMqiNc1IxtaKpjeuWrTtCe/hniEVj%252BYF0WlASNTzX5WWBbl%252BJAWFUW7jF8XnISiW/uWglDoBfzIKqO2lIJs05cFG3nWFF1lcdx4RntvQQIdu64jdq13SF/guZ5bneg2L2%252Bb1x7%252BB9pZcBDv3HulwORbR%252B4Q80gnI4VR2Q4t6BcMtNRcLDhLw7xFXGFI%252BoMNI5pSKQLDSIYDOoNImj8PwYSiOIVhyLQDMEMz1P6nkICyAALLFsS0BssRy4YEu0AAnAAHLIhixIw0gSwzTNSCzpBs1IDOCCAhikELBvU6QcCwEgaD0ngPZkBQECO3YzupigzBsKrhgW30zuPmbED3MLpD3Aoyo6NIAukI7ARwQA8iwDCx9bpBYB5bA9hH%252BD%252BsgBB4ImZuZ/emDICItJxwzuzvrXjB4PcrjEDomgYJImcuHgfi1zTrDsJzvBN/cZuwKeKB%252BMgiwMFwpCJsQIAuCILB5HqRt2MXKHSAWyeyKoBYhminC8PwXBMKops8xIdA03TesR8bd6qxsBYbBL/y%252Bx0quxYYf9TFwIQEg6lZD0FUB3J2LtQGJQgcPHggthYbzFmA2KysJZq2VsrDYXAJYbHVlsWmUhdaMyftIU25tLZINtjARAIBlJ3AIOQSgHsvZL3oJgfARB2GkAVK4Ow/dtZSHpqQzOxt%252BaqAVIQGIL834fy/oPVQv9/6GytizZB4tZCxVkDo3Rei9FCJIfrQ2xsKEWzUSLIRXAGZ91oAHURJjyFUOthvRebQnQgAlkAA][Compiler Explorer Link to see the results]]

I'll clean up my anyduck project and push it at some point.
